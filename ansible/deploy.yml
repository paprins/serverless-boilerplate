---
  - name: Deploy service to target environment using serverless.
    hosts: all
    connection: local
    gather_facts: false

    vars:
      base_path: "{{ lookup('pipe', 'git rev-parse --show-toplevel')}}"

      env_to_description:
        dev: development
        tst: test
        uat: acceptance
        prod: production

      aws_region: eu-west-1

      sls_action: deploy

    tasks:

      - assert:
          that:
            - ansible_version.major == 2
            - ansible_version.minor >= 5
          msg: "You need ansible 2.5 (or later)"

      - name: check required parameters
        assert:
          that:
            - service is defined
            - env is defined
          msg: "Missing required variable (oneof: 'service' ,'env')"

      - name: check valid values for `sls_action`
        assert:
          that:
            - sls_action in ['deploy','remove']
          msg: "'{{ sls_action }}' is not a valid value for `sls_action`. Allowed values: ['deploy','remove']"

      # getting `role_arn` from SSM Parameter Store
      # TODO: use `set_fact` and check if value is _not_ empty. If so, fail.
      - name: assume role
        sts_assume_role:
          role_arn          : "{{ lookup('aws_ssm', '/awx/{{service}}/{{env}}/role_arn', region=aws_region, decrypt=true)}}"
          role_session_name : "{{env}}_session"
          region            : "{{ aws_region }}"
        changed_when: false
        register: _role

      - name: set aws facts
        set_fact:
          aws_access_key    : "{{ _role.sts_creds.access_key }}"
          aws_secret_key    : "{{ _role.sts_creds.secret_key }}"
          aws_session_token : "{{ _role.sts_creds.session_token }}"

      - name: deploy service
        block:
          - name: run serverless
            serverless:
              region       : "{{ aws_region }}"
              service_path : "{{ base_path }}"
              stage        : "{{ env }}"
              state        : "{{ (sls_action == 'deploy') | ternary('present', 'absent') }}"
            environment:
              AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
              AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
              AWS_SESSION_TOKEN: "{{ aws_session_token }}"
            register: _sls

          - debug:
              msg: "Successfully {{ (sls_action == 'deploy')|ternary('deployed','removed') }} '{{ service }}' in {{ env_to_description[env] }} environment."
            when: not _sls.failed

        # If it fails, it fails ... solve it by sending a notification.
